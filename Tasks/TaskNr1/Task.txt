Напишите программу на языке C++, решающую следующую задачу:
  
Минное поле. План минного поля имеет форму прямоугольной таблицы размером n×m (n, m ≤ 50) и разделен на квадратные зоны длиной 1 (см. рисунок 1). В каждой реальной зоне поля может быть размещена мина. Более конкретная информация о исследуемом поле содержится в текстовом файле Teren.in, в котором на первой строке записаны натуральные числа n и m, разделенные пробелом. Каждая из следующих n строк этого файла содержит по m бинарных цифр, разделенных пробелами - элементы матрицы T, в которой T[i, j] = 1, если зона [i, j] содержит мину, и T[i, j] = 0, если зона свободна. Создайте приложение, которое по запросу пользователя будет выполнять следующие инструкции: (Дизайн приложения на ваше усмотрение).
1.	Поменять местами первый и последний столбец поля;
2.	"Разминировать" зоны строки/столбца; выбор альтернативы и номер строки/ столбца для "разминирования" будут указаны с клавиатуры;
3.	Определить номер строки/столбца с максимальным числом заминированных зон;
4.	Определить среднее количество заминированных зон на нечетных строках исследуемого поля;
5.	Вывести на экран список порядков столбцов поля в порядке убывания общего количества размещенных в них мин; данные должны быть отсортированы методом подсчета;
6.	Создать текстовый файл Mine.txt, в котором будут скопированы только те строки исходного файла Teren.in, которые содержат мины;
7.	Определить количество объектов в бинарной матрице T. Примечание. Объект состоит из элементов со значением 1, соседствующих по строкам, столбцам или диагоналям.
8.	Решить проблему. Солдат, имеющий металлоискатель, начинает движение из одного угла поля и должен достичь противоположного угла. На рассматриваемом поле солдат может двигаться только ортогонально и, конечно, не попадать в минные зоны. Определить кратчайший путь, который должен пройти солдат, чтобы достичь зоны [1, 1], считая ее свободной, в зону [n, m]. Входные данные. Информация о размерах поля и заминированных зонах территории содержится в текстовом файле Teren.in, описанном ранее. Выходные данные. На экран выводится найденный путь, описанный координатами соответствующих зон. Например, для иллюстрации на рисунке 2 путь будет выведен следующим образом: [1, 1]–[2, 1]–[2, 2]–[3, 2]–[3, 3]–[4, 3]–[4, 4]–[4, 5]–[3, 5]–[3, 6] –[3, 7]– [4, 7]– [5, 7] –[5, 6] – [6, 6] –[7, 6] –[7, 7] –[7, 8]
